'''
Problem 1
Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''

def multiples_of_three_and_five(numbers):
    sum = 0
    for num in numbers:
        #check number in between 10 to 1000
        if num >=10 and num <= 1000:
            #checking numbers are  multiples of 3 or 5
            if (num % 3) == 0 or (num % 5) == 0:
                sum = sum + num
    return sum

#print(multiples_of_three_and_five([3, 5, 6, 9, 20, 18, 40, 3, 100]))

'''

Problem 2
name: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def even_fibonacci_numbers():
    prev, cur = 0, 1
    total = 0
    while True:
        prev, cur = cur, prev + cur
        if cur >= 4000000:
            break
        if cur % 2 == 0:
            total += cur
    return total

print(even_fibonacci_numbers())

'''
Largest prime factor
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''

def largest_prime_factor(number):
    print(number)
    end = number
    largest_prime_number = []

    for i in range(1, number):
        if number%i == 0:
            if i/1== 0 and i/i == 0:
                print(i)


#print(largest_prime_factor(13195))