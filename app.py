'''
Problem 1
Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''

def multiples_of_three_and_five():
    sum = 0
    for i in range(0, 1000):
        if (i % 3) == 0 or (i % 5) == 0:
            sum = sum + i
    return sum

#print(multiples_of_three_and_five())

'''

Problem 2
name: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def even_fibonacci_numbers():
    prev, cur = 0, 1
    total = 0
    while True:
        prev, cur = cur, prev + cur
        if cur >= 4000000:
            break
        if cur % 2 == 0:
            total += cur
    return total

#print(even_fibonacci_numbers())

'''
Problem 3
Largest prime factor
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?


p = 2
while (p*p <= n):      
  if (n % p == 0): 
    n //= p
  else: 
    p += 2 if p>2 else 1   # after 2, consider only odd p

Here's a trace of this algorithm to demonstrate the process of removing prime factors from 
the number n and leaving the largest prime factor p.
n=495
 p      p2   n
p=2 and 4 ≤ 495: 2 is not a factor so its skipped and p is incremented to 3
p=3 and 9 ≤ 495: 3 is a factor: n = 165
p=3 and 9 ≤ 165: 3 is a factor: n = 55
p=3 and 9 ≤ 55: 3 is not a factor so its skipped and p is incremented to 5
p=5 and 25 ≤ 55: 5 is a factor: n = 11
p=5 and 25 ≤ 55: 5 is not a factor so its skipped and p is incremented to 7
p=7 and 49 ≤ 55: 7 is not a factor so its skipped and p is incremented to 9
p=9 and 81 not ≤ 55: p is incremented to 11 and the while loop terminates.
The conditional of the while loop is checked after the loop's last statement.

'''

def largest_prime_factor(number):
    end = number
    largest_prime_number = []

    for i in range(1, number):
        if number%i == 0:
            if i/1== 0 and i/i == 0:
                largest_prime_number = largest_prime_number + number[i]
    return largest_prime_number

#print(largest_prime_factor(13195))

'''
Problem 4

Largest palindrome product
A palindromic number reads the same both ways. 
The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.

'''

def largest_palindrome_product():
    max_pal = 0
    list_of_palindrome = []
    for i in range(100, 999):
        for j in range(100, 999):
            max_pal = i*j
            if str(max_pal) == str(max_pal)[::-1]:
                list_of_palindrome.append(max_pal)

    return max(list_of_palindrome)

print(largest_palindrome_product())

'''
Problem 5
Smallest multiple
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

'''

def smallest_positive_number():
    pass