import math
'''
Problem 1
Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''

def multiples_of_three_and_five():
    sum = 0
    for i in range(0, 1000):
        if (i % 3) == 0 or (i % 5) == 0:
            sum = sum + i
    return sum

#print(multiples_of_three_and_five())

'''

Problem 2
name: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def even_fibonacci_numbers():
    prev, cur = 0, 1
    total = 0
    while True:
        prev, cur = cur, prev + cur
        if cur >= 4000000:
            break
        if cur % 2 == 0:
            total += cur
    return total

#print(even_fibonacci_numbers())

'''
Problem 3
Largest prime factor
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?


p = 2
while (p*p <= n):      
  if (n % p == 0): 
    n //= p
  else: 
    p += 2 if p>2 else 1   # after 2, consider only odd p

Here's a trace of this algorithm to demonstrate the process of removing prime factors from 
the number n and leaving the largest prime factor p.
n=495
 p      p2   n
p=2 and 4 ≤ 495: 2 is not a factor so its skipped and p is incremented to 3
p=3 and 9 ≤ 495: 3 is a factor: n = 165
p=3 and 9 ≤ 165: 3 is a factor: n = 55
p=3 and 9 ≤ 55: 3 is not a factor so its skipped and p is incremented to 5
p=5 and 25 ≤ 55: 5 is a factor: n = 11
p=5 and 25 ≤ 55: 5 is not a factor so its skipped and p is incremented to 7
p=7 and 49 ≤ 55: 7 is not a factor so its skipped and p is incremented to 9
p=9 and 81 not ≤ 55: p is incremented to 11 and the while loop terminates.
The conditional of the while loop is checked after the loop's last statement.

'''

def get_factor(number):
    factor_number = []

    for num in range(1, int(math.sqrt(number))+1):
        if number%num == 0:
            factor_number.append(num)
            factor_number.append( num // number )
    return factor_number

#print(get_factor(24))

def is_prime(number):
    return len(get_factor(number)) == 2

def largest_prime_factor(number):
    allfacetors = get_factor(number)
    largest_prime_number = 0

    for factor in allfacetors:
        if is_prime(factor) and factor > largest_prime_number:
            largest_prime_number = factor
    return largest_prime_number

#print(largest_prime_factor(600851475143))



'''
Problem 4

Largest palindrome product
A palindromic number reads the same both ways. 
The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.

'''

def largest_palindrome_product():
    max_pal = 0
    list_of_palindrome = []
    for i in range(100, 999):
        for j in range(100, 999):
            max_pal = i*j
            if str(max_pal) == str(max_pal)[::-1]:
                list_of_palindrome.append(max_pal)

    return max(list_of_palindrome)

#print(largest_palindrome_product())

'''
Problem 5
Smallest multiple
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

'''

def is_divisible(number):
    for i in range(2, 21):
        if number%i !=0:
            return False
    return True

def smallest_positive_number():

    num = 20
    while True:
        if is_divisible(num):
            break
        num = num + 20
    return num

#print(smallest_positive_number())

'''
Problem 6
Sum square difference 
The sum of the squares of the first ten natural numbers is,
12+22+...+102=385
The square of the sum of the first ten natural numbers is,
(1+2+...+10)2=552=3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640
.Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''

def sum_square_difference():
    sumOfSquare = 0

    #getting sum square value
    for i in range(1, 101):
        sumOfSquare += i*i
    print(sumOfSquare)

    #getting suqare sum value
    squareOfSum = 0
    for i in range(1, 101):
        squareOfSum +=  1
    squareOfSum = squareOfSum * squareOfSum

    print(squareOfSum - sumOfSquare)

#sum_square_difference()

'''
Problem 7
10001st prime
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?

'''

def isPrime(n):
    if n < 2: return "Neither prime, nor composite"
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# returns the nth prime number
def nthPrime(n):
    numberOfPrimes = 0
    prime = 1

    while numberOfPrimes < n:
        prime += 1
        if isPrime(prime):
            numberOfPrimes += 1
    return prime

print(nthPrime(10001))
